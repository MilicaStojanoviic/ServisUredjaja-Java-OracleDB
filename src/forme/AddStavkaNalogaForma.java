/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import domeni.Radnja;
import domeni.StavkaRadnogNaloga;
import domeni.VrstaDobra;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import kontroler.Controller;

/**
 *
 * @author Lenovo
 */
public class AddStavkaNalogaForma extends javax.swing.JFrame {

    String operation;
    StavkeNalogaForma parent;
    StavkaRadnogNaloga sn;
    /**
     * Creates new form AddStavkaNalogaForma
     */
    public AddStavkaNalogaForma(StavkeNalogaForma parent, boolean modal, StavkaRadnogNaloga sn, String operation) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.parent = parent;
        this.sn = sn;
        this.operation = operation;
        
        fillCmbVDobra();
        
        if (operation.equals("UPDATE")) {
            adjustFields(sn);
        } else {
            txtOpis.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbDobro = new javax.swing.JComboBox();
        txtKolicina = new javax.swing.JTextField();
        txtPDV = new javax.swing.JTextField();
        txtOpis = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 153));

        jLabel1.setText("Dobro:");

        jLabel2.setText("Kolicina:");

        jLabel3.setText("PDV stopa:");

        jLabel4.setText("Opis greske:");

        cmbDobro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnAdd.setText("Dodaj stavku");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtOpis)
                            .addComponent(txtPDV)
                            .addComponent(txtKolicina)
                            .addComponent(cmbDobro, 0, 279, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbDobro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtKolicina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPDV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtOpis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnAdd)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            if (this.operation.equals("INSERT")) {
                this.insert();
            } else if (this.operation.equals("UPDATE")) {
                this.update();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
            adjustFields(sn);            
        }
    }//GEN-LAST:event_btnAddActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JComboBox cmbDobro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtKolicina;
    private javax.swing.JTextField txtOpis;
    private javax.swing.JTextField txtPDV;
    // End of variables declaration//GEN-END:variables

    private void fillCmbVDobra() {
        try {
            cmbDobro.removeAllItems();
            List<VrstaDobra> dobra = Controller.getInstance().getDobraList();
            for (VrstaDobra dobro : dobra) {
                cmbDobro.addItem(dobro);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Greska prilikom ucitavanja dobra!", "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void adjustFields(StavkaRadnogNaloga sn) {
        txtKolicina.setText(String.valueOf(sn.getKolicina()));
        txtPDV.setText(String.valueOf(sn.getPdvStopa()));
        txtOpis.setText(sn.getOpisGreske());
        cmbDobro.setSelectedItem(sn.getVrstaDobra());
        btnAdd.setText("Izmeni stavku");
    }

    private void insert() throws Exception {
        if (txtKolicina.getText().isEmpty() || txtPDV.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Morate popuniti sva polja!");
            return;
        }
        
        VrstaDobra dobro=(VrstaDobra) cmbDobro.getSelectedItem();
        int kolicina=Integer.parseInt(txtKolicina.getText());
        int pdv=Integer.parseInt(txtPDV.getText());
        
        StavkaRadnogNaloga stavka=new StavkaRadnogNaloga();
        stavka.setRadniNalog(sn.getRadniNalog());
        stavka.setKolicina(kolicina);
        stavka.setPdvStopa(pdv);
        stavka.setVrstaDobra(dobro);
        
        Controller.getInstance().insert(stavka);
        JOptionPane.showMessageDialog(this, "Uspesno dodata stavka naloga!", "Uspesno", JOptionPane.INFORMATION_MESSAGE);
        parent.refreshTable();
        this.setVisible(false);
    }

    private void update() throws Exception {
        if (txtKolicina.getText().isEmpty() || txtPDV.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Morate popuniti sva polja!");
            return;
        }
        
        VrstaDobra dobro=(VrstaDobra) cmbDobro.getSelectedItem();
        int kolicina=Integer.parseInt(txtKolicina.getText());
        int pdv=Integer.parseInt(txtPDV.getText());
        String opis=txtOpis.getText();
        
        StavkaRadnogNaloga stavka=new StavkaRadnogNaloga();
        stavka.setRadniNalog(sn.getRadniNalog());
        stavka.setKolicina(kolicina);
        stavka.setPdvStopa(pdv);
        stavka.setVrstaDobra(dobro);
        stavka.setOpisGreske(opis);
        stavka.setRb(sn.getRb());
        
        if(!opis.equals(sn.getOpisGreske())){
            stavka.setIzmenaOpisaGreske(true);
        }
        
        Controller.getInstance().update(stavka);
        JOptionPane.showMessageDialog(this, "Uspesno izmenjena stavka naloga!", "Uspesno", JOptionPane.INFORMATION_MESSAGE);
        parent.refreshTable();
        this.setVisible(false);
    }
}
